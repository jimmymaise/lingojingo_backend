image: docker:latest
variables:
  PIP_PROCESS_DEPENDENCY_LINKS: 1
  PROJECT_NAME: sts

stages:
  - test
  - build
  - deploy
  - add_version



#
#unit_test:
#  image: node:latest
#
#  stage: test
#  script:
#    - npm install
##    - npm test
#  artifacts:
#    paths:
#      - node_modules/

#Deploy for releasing to production

test:
  stage: test
  script: echo "Running tests"
  only:
    - master



build_staging:
  stage: build
  image: google/cloud-sdk
  services:
    - docker:dind
  script:
    - config
    - build
  environment:
    name: staging
  only:
    - master

build_production:
  stage: build
  image: google/cloud-sdk
  services:
    - docker:dind
  script:
    - config
    - build
  environment:
    name: production
  only:
    - /^v\d+\.\d+\.\d+$/
    - /^v\d+\.\d+\.\d+\.hotfix$/




deploy_staging:
  stage: deploy
  image: google/cloud-sdk

  script:
    - config
    - deploy
  environment:
    name: staging
    url: https://$CI_ENVIRONMENT_SLUG-$PROJECT_NAME.$MY_DOMAIN
  only:
    - master
    - /^release\d+\.\d+\.\d+$/


deploy_production_old:
  stage: deploy
  tags:
    - runner1
  environment:
    name: production
    url: https://app.lingojingo.com
  variables:
    NODE_ENV: $PROD_ENV
    MONGO_URL: $MONGO_PROD_URL
  only:
    - /^old\d+\.\d+\.\d+$/
  before_script:
    - docker info
  script:
    - docker stop $(docker ps -a -q) || true
    - docker rm $(docker ps -a -q)  || true
    - docker rmi $(docker images -a -q) || true
    - docker build -t my-docker-image .
    - docker run -t -d -p 8080:8080 -p 8081:8081 -e NODE_ENV=$PROD_ENV -e ES_URL=$PROD_ES_URL -e XTAG_TIME=$XTAG_TIME  -e MONGO_URL=$MONGO_PROD_URL         -e FIRE_BASE_CONFIG_SERVICE=$PROD_FIRE_BASE_CONFIG_SERVICE my-docker-image

deploy_production_new:
  stage: deploy
  image: google/cloud-sdk

  script:
    - config
    - deploy
  environment:
    name: production
    url: https://$CI_ENVIRONMENT_SLUG-$PROJECT_NAME.$MY_DOMAIN
  only:
    - /^v\d+\.\d+\.\d+$/
    - /^v\d+\.\d+\.\d+\.hotfix$/


add_version_stag:
  stage: add_version
  only:
    - /^release\d+\.\d+\.\d+$/
  script:
    - UPDATE_VERSION_URL="${STAG_BE_URL?}/version/backend/${CI_COMMIT_TAG?}"
    - curl -X POST  ${UPDATE_VERSION_URL?}
    - echo  ${UPDATE_VERSION_URL?}

add_version_prod:
  stage: add_version
  only:
    - /^v\d+\.\d+\.\d+$/
  script:
    - UPDATE_VERSION_URL="${PROD_BE_URL?}/version/backend/${CI_COMMIT_TAG?}"
    - curl -X POST  ${UPDATE_VERSION_URL?}
    - echo  ${UPDATE_VERSION_URL?}


# Custom Functions -------------------------------------------------------
.custom_functions: &custom_functions |
  export VERSION=$(echo $CI_COMMIT_SHA | cut -c8-25)
  export DEPLOYMENT_NAME=$PROJECT_NAME-$CI_ENVIRONMENT_SLUG

  function build() {
    gcloud builds submit . --config=cloudbuild.yaml --substitutions _IMAGE=$IMAGE,_VERSION=$VERSION
  }
  function config() {
    if [[ "$CI_ENVIRONMENT_SLUG" != "production" ]]; then
      export IMAGE=gcr.io/$GCP_PROJECT_ID_STAGING/$PROJECT_NAME
      echo "$GCP_SERVICE_KEY_STAGING" > gcloud-service-key.json
      gcloud auth activate-service-account --key-file gcloud-service-key.json
      gcloud config set project $GCP_PROJECT_ID_STAGING
      gcloud beta container clusters get-credentials $GCP_KUBE_NAME_STAGING --region $GCP_REGION_STAGING --project $GCP_PROJECT_ID_STAGING
    else
      export IMAGE=gcr.io/$GCP_PROJECT_ID_PRODUCTION/$PROJECT_NAME
      echo "$GCP_SERVICE_KEY_PRODUCTION" > gcloud-service-key.json
      gcloud auth activate-service-account --key-file gcloud-service-key.json
      gcloud config set project $GCP_PROJECT_ID_PRODUCTION
      gcloud beta container clusters get-credentials $GCP_KUBE_NAME_PRODUCTION --region $GCP_REGION_PRODUCTION --project $GCP_PROJECT_ID_PRODUCTION
    fi
  }

  function deploy() {
      kubectl set image deployment.extensions/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE:$VERSION
      kubectl rollout status deployment.extensions/$DEPLOYMENT_NAME
      kubectl get all,ing -l app=$DEPLOYMENT_NAME
  }

before_script:
  - *custom_functions
  #      gcloud container images untag $IMAGE:staging-latest

